<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Josh W Lewis</title>
  <subtitle>Personal site of Josh W Lewis: Software Engineer, Web Developer, Rubyist</subtitle>
  <id>http://joshwlewis.com/</id>
  <link href="http://joshwlewis.com/"/>
  <link href="http://joshwlewis.com/feed.xml" rel="self"/>
  <updated>2013-08-13T00:00:00Z</updated>
  <author>
    <name>Josh W Lewis</name>
  </author>
  <entry>
    <title>Unitwise: Ruby Unit Measurement Math and Conversion</title>
    <link rel="alternate" href="/essays/unitwise-ruby-unit-measurement"/>
    <id>/essays/unitwise-ruby-unit-measurement</id>
    <published>2013-08-13T00:00:00Z</published>
    <updated>2013-08-13T00:00:00Z</updated>
    <author>
      <name>Josh W Lewis</name>
    </author>
    <summary type="html">&lt;p&gt;So, way back in Mechanical Engineering school, I learned that a very effective way to check my answers was to make sure the units worked out. For an example, consider a basic physics problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The average mass of an adult American male is 86 kilograms...&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <content type="html">&lt;p&gt;So, way back in Mechanical Engineering school, I learned that a very effective way to check my answers was to make sure the units worked out. For an example, consider a basic physics problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The average mass of an adult American male is 86 kilograms. Determine weight of an average man on the moon where the gravitational field is one-sixth that of the Earth (9.8 m/s&lt;sup&gt;2&lt;/sup&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you paid attention in physics, you would work it out like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;  &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;86&lt;/span&gt; &lt;span class="c1"&gt;# 86 kg&lt;/span&gt;
  &lt;span class="n"&gt;acceleration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="c1"&gt;# 1.633334 m/s2&lt;/span&gt;
  &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;acceleration&lt;/span&gt; 
  &lt;span class="c1"&gt;# =&amp;gt; 140.4666666666667&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ok, so 140 &amp;ndash; but 140 what? Since we effectively performed &amp;#39;kg * m/s&lt;sup&gt;2&lt;/sup&gt;&amp;#39; it&amp;#39;s plain to see that our unit is &amp;#39;kg&amp;sdot;m/s&lt;sup&gt;2&lt;/sup&gt;&amp;#39;. Ok, great, so our unit result is in the form of a mass times an acceleration, just as we would expect to see when calculating a force. When you are using a pen and paper, this is a great way to make sure your result is what you expect (your force is a measurement force, your energy is a unit of energy).&lt;/p&gt;

&lt;p&gt;But using straight up Numerics for calculation through Ruby means that we lose track of units. As the calculation gets more complicated, manual unit checking becomes monotonous and error-prone. On &lt;a href="https://www.emergentcoils.com/"&gt;emergentcoils.com&lt;/a&gt; I&amp;#39;ve had to do a fair amount of these types of calculations (namely heat transfer capacities), and I was getting tired of trying to remember what unit a Numeric value was in.&lt;/p&gt;

&lt;p&gt;So, like any good Rubyist, I searched for a RubyGem that could track units as I performed math on them. There are a couple already out there (most notably &lt;a href="https://github.com/olbrich/ruby-units"&gt;ruby-units&lt;/a&gt;), and they certainly work for many (or probably most) situations. However, they either didn&amp;#39;t have a few of the units I needed or they only did conversion (not Math). &lt;/p&gt;

&lt;p&gt;During my search, I ended up stumbling across &lt;a href="http://www.unitsofmeasure.org/"&gt;The Unified Code for Units of Measurement (UCUM)&lt;/a&gt; &amp;ndash; which had all the units I needed ready to go in XML format. From that &lt;a href="https://github.com/joshwlewis/unitwise"&gt;Unitwise&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;Now, it&amp;#39;s really easy to track units for our example problem:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;86&lt;/span&gt;&lt;span class="nf"&gt;.kg&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; &amp;lt;Unitwise::Measurement 86 kg&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;acceleration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="nf"&gt;.convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'m/s2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; &amp;lt;Unitwise::Measurement 1.6333333333333335 m/s2&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;acceleration&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; &amp;lt;Unitwise::Measurement 140.4666666666667 kg.m/s2&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And of course it does conversion:&lt;/p&gt;
&lt;pre class="highlight text"&gt;mass.pound
=&amp;gt; &amp;lt;Unitwise::Measurement 189.5975454789947 pound&amp;gt;

force.newton
=&amp;gt; &amp;lt;Unitwise::Measurement 140.4666666666667 newton&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Obviously, this is a very simple example, but the possibilities are certainly endless. UCUM (and by extension Unitwise) features 95 metric units, 199 non-metric units, and 24 unit prefixes. That&amp;#39;s approximately 2,500 basic units to start you with, but these can be combined with multiplication and division for infinite combinations.&lt;/p&gt;

&lt;p&gt;You can find Unitwise at &lt;a href="https://github.com/joshwlewis/unitwise"&gt;github.com/joshwlewis/unitwise&lt;/a&gt;. Check out the README there for installation and additional usage instructions.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rails' ActiveSupport try</title>
    <link rel="alternate" href="/essays/rails-active-support-try"/>
    <id>/essays/rails-active-support-try</id>
    <published>2013-04-26T00:00:00Z</published>
    <updated>2013-04-26T00:00:00Z</updated>
    <author>
      <name>Josh W Lewis</name>
    </author>
    <summary type="html">&lt;p&gt;ActiveSupport has a few great Ruby extensions that I just love. One of my favorites is try.&lt;/p&gt;

&lt;h3&gt;.try()&lt;/h3&gt;

&lt;p&gt;Try is a sneaky method for handling NoMethodErrors on NilClass. If you ever get stuck writing code like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.name&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.nil?&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Consider...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;ActiveSupport has a few great Ruby extensions that I just love. One of my favorites is try.&lt;/p&gt;

&lt;h3&gt;.try()&lt;/h3&gt;

&lt;p&gt;Try is a sneaky method for handling NoMethodErrors on NilClass. If you ever get stuck writing code like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.name&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.nil?&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Consider using try instead:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.try&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s basically like using send, but it will return nil if the reciever is nil.&lt;/p&gt;

&lt;p&gt;Here it works like send:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Josh&amp;quot;&lt;/span&gt;    &lt;span class="c1"&gt;#=&amp;gt; #&amp;lt;User&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;                 &lt;span class="c1"&gt;#=&amp;gt; &amp;quot;Josh&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.try&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;                  &lt;span class="c1"&gt;#=&amp;gt; &amp;quot;Josh&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And here it doesn&amp;#39;t blow up with a NoMethodError:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;                      &lt;span class="c1"&gt;#=&amp;gt; nil&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;                 &lt;span class="c1"&gt;#=&amp;gt; NoMethodError&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.try&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;                  &lt;span class="c1"&gt;#=&amp;gt; nil&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It comes in handy fairly often.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rails Flash Messages with Twitter Bootstrap</title>
    <link rel="alternate" href="/essays/rails_flash_messages_with_twitter_bootstrap"/>
    <id>/essays/rails_flash_messages_with_twitter_bootstrap</id>
    <published>2013-03-02T00:00:00Z</published>
    <updated>2013-03-02T00:00:00Z</updated>
    <author>
      <name>Josh W Lewis</name>
    </author>
    <summary type="html">&lt;p&gt;When building new Rails projects, I often use &lt;a href="//twitter.github.com/bootstrap"&gt;Bootstrap&lt;/a&gt; because it lets me focus more on the business logic, rather than design. Almost everytime I start one of these projects, I forget how I did flash messages the last time, and have to look at a...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;When building new Rails projects, I often use &lt;a href="//twitter.github.com/bootstrap"&gt;Bootstrap&lt;/a&gt; because it lets me focus more on the business logic, rather than design. Almost everytime I start one of these projects, I forget how I did flash messages the last time, and have to look at a past project or refer to Bootstrap&amp;#39;s documentation.&lt;/p&gt;

&lt;p&gt;So, for my reference, and maybe your gain, this is the method that works for me.&lt;/p&gt;
&lt;pre class="highlight haml"&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="nf"&gt;.each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bootstrap_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;alert: &lt;/span&gt;&lt;span class="s1"&gt;'alert-error'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s1"&gt;'alert-success'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;info: &lt;/span&gt;&lt;span class="s1"&gt;'alert-info'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;%div&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:alert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bootstrap_class&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;%button&lt;/span&gt;&lt;span class="nc"&gt;.close&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="ss"&gt;dismiss: :alert&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;} ×
    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This partial renders all flash messages (In the rare case that you have more than one), and matches the flash type to the bootstrap class. It also uses lets users close the messages (via bootstrap-transitions.js or bootstrap.js)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Static Site Creation with Middleman</title>
    <link rel="alternate" href="/essays/static_site_creation_with_middleman"/>
    <id>/essays/static_site_creation_with_middleman</id>
    <published>2013-02-10T00:00:00Z</published>
    <updated>2013-02-10T00:00:00Z</updated>
    <author>
      <name>Josh W Lewis</name>
    </author>
    <summary type="html">&lt;p&gt;I've put off building my personal website for a while. For two reasons really:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I am cheap, and I didn't want to buy a VPS for a Rails/Sinatra application.&lt;/li&gt;
&lt;li&gt;I am lazy, and I don't want to write a bunch of html files for a static site.&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;Enter Static Site...&lt;/h4&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;#39;ve put off building my personal website for a while. For two reasons really:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I am cheap, and I didn&amp;#39;t want to buy a VPS for a Rails/Sinatra application.&lt;/li&gt;
&lt;li&gt;I am lazy, and I don&amp;#39;t want to write a bunch of html files for a static site.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Enter Static Site Generators&lt;/h4&gt;

&lt;p&gt;Turns out there are tools out there to bridge the gap. They let you use all the
great tools for making development easier, but compile to static HTML files. Some
examples of these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll&lt;/li&gt;
&lt;li&gt;Octopress&lt;/li&gt;
&lt;li&gt;Middleman&lt;/li&gt;
&lt;li&gt;Nanoc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won&amp;#39;t go into the virtues of each of these, but my eventual choice was Middleman.&lt;/p&gt;

&lt;h3&gt;Middleman&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s built on Ruby, and it&amp;#39;s got a bunch of Rails already baked in. For example&amp;hellip;&lt;/p&gt;

&lt;p&gt;I can use link_to, just like Rails:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Or render a partial, just like Rails:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;partial&lt;/span&gt; &lt;span class="ss"&gt;:article_preview&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:locals&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I can use Haml for layouts, just like Rails:&lt;/p&gt;
&lt;pre class="highlight haml"&gt;&lt;span class="nf"&gt;#page&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt;
    &lt;span class="nt"&gt;%section&lt;/span&gt;&lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="nf"&gt;.articles.present?&lt;/span&gt;
      &lt;span class="nt"&gt;%footer&lt;/span&gt;&lt;span class="nc"&gt;.explore.center&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And I can even write some Ruby to keep things DRY:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;sentence_tag_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="nf"&gt;.tags&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;This article was filed under &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: :tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="nf"&gt;.tags.map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/essays/categories/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;.to_sentence&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;h4&gt;Best of Both Worlds&lt;/h4&gt;

&lt;p&gt;So in development, I can use Ruby, Sass, Coffeescript, Markdown, and Haml.
So it&amp;#39;s a pleasure to build sites, and I&amp;#39;m a happy developer. However, my
production machine is just basic Apache with static files. This allows me to implement
several layers of caching.&lt;/p&gt;

&lt;h3&gt;So its BLAZING FAST.&lt;/h3&gt;
</content>
  </entry>
</feed>
